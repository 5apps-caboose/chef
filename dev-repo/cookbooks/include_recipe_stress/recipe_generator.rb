require 'pp'

RECIPE_COUNT = 200
ATTR_READ_WRITE_COUNT = 10

ATTR_LEVEL_COUNTS = [20, 20, 10, 6, 4]
ATTR_DIFFUSION_PERCENT = 0.5
ATTR_VALUE_RANGE = 20

class RandomAttributeTree
  attr_reader :attr_count

  def initialize(level_counts)
    @attr_references = [ ]
    @attr_tree = generate(level_counts)
    output_attribute_file()
  end

  def random_attr_check
    s = <<EOF
if node#{@attr_references.sample} == #{random_value}
  Chef::Log.info("Attr Check Hit!")
end
EOF
    s
  end

  # Live traverse
  # def random_attr_update
  #   level = rand(3) + 1
  #   path = [ ]
  #   value = @attr_tree
  #
  #   level.times do
  #     key = @attr_tree.keys.sample
  #     path << key
  #     if !value[key].is_a? Hash
  #       return "node.default#{path.map{|a| "[\"#{a}\"]"}.join("")} = #{random_value}"
  #     else
  #       value = value[key]
  #     end
  #   end
  #
  #   return "node.default#{path.map{|a| "[\"#{a}\"]"}.join("")} = #{random_value}"
  # end

  def random_attr_update
    "node.default#{@attr_references.sample} = #{random_value}"
  end

  def random_value
    rand(ATTR_VALUE_RANGE)
  end

  # returns a hash to be assigned to an attribute
  def generate(level_counts)
    return random_value() if level_counts.empty?

    branch_count = level_counts.shift
    leaf_count = branch_count * ATTR_DIFFUSION_PERCENT
    branch_count -= leaf_count

    return_value = { }
    branch_count.to_i.times do |i|
      return_value["attr_level_#{i.to_i}"] = generate(level_counts.dup)
    end

    leaf_count.to_i.times do |i|
      return_value["attr_level_#{(i + branch_count).to_i}"] = random_value()
    end

    return_value
  end

  def write_attributes(file, attr_tree, path = [ ])
    require 'pry'
    binding.pry
    attr_tree.each do |key, value|
      path.push key
      if value.is_a? Hash
        write_attributes(file, value, path)
      else
        attr_reference = path.map{|a| "[\"#{a}\"]"}.join("")
        @attr_references << attr_reference
        file.puts "default#{attr_reference} = #{value}"
      end
      path.pop
    end
  end

  def output_attribute_file
    File.open("attributes/default.rb", "w+") do |f|
      f.puts "# This file is auto generated by recipe_generator.rb"
      write_attributes(f, @attr_tree, [ ])
    end
  end
end

r = RandomAttributeTree.new(ATTR_LEVEL_COUNTS)

RECIPE_COUNT.times do |i|
  File.open("recipes/recipe_#{i}.rb", "w+") do |f|
    recipe_contents = [ ]

    ATTR_READ_WRITE_COUNT.times do
      recipe_contents << r.random_attr_check
      recipe_contents << r.random_attr_update
    end

    f.write(recipe_contents.join("\n\n"))
  end
end

File.open("recipes/stress.rb", "w+") do |f|
  RECIPE_COUNT.times do |i|
    f.puts("include_recipe \"include_recipe_stress::recipe_#{i}\"")
  end
end
